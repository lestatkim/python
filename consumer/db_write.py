import psycopg2 as pg
from datetime import datetime


class DbWrite:
    """

    create table dwh.reid_journal (
        id integer GENERATED BY DEFAULT AS IDENTITY primary key,
        ts timestamp without time zone NULL,
        cosine double precision NULL,
        filename text,
        best_frame text
    );

    create table dwh.frames (
        id integer GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
        id_reid integer REFERENCES dwh.reid_journal (id),
        came_in timestamp without time zone NULL,
        threshold float(32),
        sharpness float(32),
        rect_id int,
        emotions float(32)[],
        camera_id int,
        object_id int,
        track_id int,
        ages int,
        female_value float(32),
        hash float(32)[],
        best boolean default false
    );

    Example:
        cnxn_string = "host='172.16.16.141' dbname='spy' user='postgreadmin' password='q3dm12'"
        dbw = DbWrite(cnxn_string)
        dbw.insert_item(track, filename, cosine, best_index, best_frame)
    """
    def __init__(self, con_str):
        """

        :param con_str: db connection string
        :example: cnxn_string = "host='172.16.16.141' dbname='spy' user='postgreadmin' password='q3dm12'"
        """
        self.con_str = con_str

    def _execute(self, query, ret=False):
        res = None
        with pg.connect(self.con_str) as con:
            cur = con.cursor()
            cur.execute(query)
            if ret:
                res = cur.fetchall()[0][0]
                cur.close()
        return res

    def insert_item(self, track, filename, cosine, best_index, best_frame, ts=None):
        ts = datetime.now() if ts is None else ts
        id_reid = self._insert_reid(cosine, filename, best_frame, ts)
        self._insert_track(track, best_index, id_reid)

    def _insert_track(self, track, best_index, id_reid):
        for frame in track:
            frame["best"] = False
            frame["id_reid"] = id_reid

        track[best_index]["best"] = True
        values = [self._frame_item(frame) for frame in track]

        insert_query = """
            insert into dwh.frames (id_reid, came_in, threshold, sharpness, rect_id, 
                emotions, camera_id, object_id, track_id, ages, female_value, hash, best)
            values
    
            """ + ', '.join(values)
        self._execute(insert_query)

    def _insert_reid(self, cosine, filename, best_frame, ts):
        insert_query = f"""
            insert into dwh.reid_journal (cosine, filename, best_frame, ts)
            values ({cosine}, '{filename}', '{best_frame}', '{ts}')
            """
        select_query = f"""
            select id 
            from dwh.reid_journal
            where cosine = {cosine}
                and filename = '{filename}'
                and ts = '{ts}';
            """

        self._execute(insert_query)
        id_reid = self._execute(select_query, ret=True)
        return id_reid

    @staticmethod
    def _frame_item(frame):
        return f"""(
            {frame["id_reid"]}, 
            '{frame["came_in"]}', 
            {frame["threshold"]}, 
            {frame["sharpness"]}, 
            {frame["rect_id"]},
            '{str(frame["emotions"]).replace("[", "{").replace("]", "}").replace("'", "")}',
            {frame["camera_id"]},
            {frame["object_id"]},
            {frame["track_id"]},
            {frame["ages"]},
            {frame["female_value"]},
            '{str(frame["hash"]).replace("[", "{").replace("]", "}").replace("'", "")}',
            {frame["best"]}

        )"""
